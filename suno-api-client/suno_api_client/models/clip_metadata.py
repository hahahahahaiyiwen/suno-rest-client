from typing import TYPE_CHECKING, Any, Dict, List, Type, TypeVar, Union

from attrs import define as _attrs_define
from attrs import field as _attrs_field

from ..types import UNSET, Unset

if TYPE_CHECKING:
    from ..models.clip_history_info import ClipHistoryInfo


T = TypeVar("T", bound="ClipMetadata")


@_attrs_define
class ClipMetadata:
    """Metadata of the audio clip.

    Attributes:
        gpt_description_prompt (Union[Unset, str]): The prompt to generate tags, title, lyrics, etc. Will overwrite user
            provided information.
        tags (Union[Unset, str]): Music genre. User-provided in custom mode, automatically generated by Suno in simple
            mode.
        prompt (Union[Unset, str]): The final prompt for executing the generation task, customized by the user in custom
            mode, automatically generated by Suno in simple mode.
        audio_prompt_id (Union[Unset, str]): The clip id of the audio which serves as the audio prompt for executing the
            generation task.
        type (Union[Unset, str]): Type of the audio. 'gen' for generated, 'upload' for uploaded
        duration (Union[Unset, float]): The clip duration in seconds.
        refund_credits (Union[Unset, bool]): Whether credits will be refunded.
        has_vocal (Union[Unset, str]): Whether clip has vocal or not.
        error_type (Union[Unset, str]): The error type if any error.
        error_message (Union[Unset, str]): The error message if any error.
        history (Union[Unset, List['ClipHistoryInfo']]):
    """

    gpt_description_prompt: Union[Unset, str] = UNSET
    tags: Union[Unset, str] = UNSET
    prompt: Union[Unset, str] = UNSET
    audio_prompt_id: Union[Unset, str] = UNSET
    type: Union[Unset, str] = UNSET
    duration: Union[Unset, float] = UNSET
    refund_credits: Union[Unset, bool] = UNSET
    has_vocal: Union[Unset, str] = UNSET
    error_type: Union[Unset, str] = UNSET
    error_message: Union[Unset, str] = UNSET
    history: Union[Unset, List["ClipHistoryInfo"]] = UNSET
    additional_properties: Dict[str, Any] = _attrs_field(init=False, factory=dict)

    def to_dict(self) -> Dict[str, Any]:
        gpt_description_prompt = self.gpt_description_prompt

        tags = self.tags

        prompt = self.prompt

        audio_prompt_id = self.audio_prompt_id

        type = self.type

        duration = self.duration

        refund_credits = self.refund_credits

        has_vocal = self.has_vocal

        error_type = self.error_type

        error_message = self.error_message

        history: Union[Unset, List[Dict[str, Any]]] = UNSET
        if not isinstance(self.history, Unset):
            history = []
            for history_item_data in self.history:
                history_item = history_item_data.to_dict()
                history.append(history_item)

        field_dict: Dict[str, Any] = {}
        field_dict.update(self.additional_properties)
        field_dict.update({})
        if gpt_description_prompt is not UNSET:
            field_dict["gpt_description_prompt"] = gpt_description_prompt
        if tags is not UNSET:
            field_dict["tags"] = tags
        if prompt is not UNSET:
            field_dict["prompt"] = prompt
        if audio_prompt_id is not UNSET:
            field_dict["audio_prompt_id"] = audio_prompt_id
        if type is not UNSET:
            field_dict["type"] = type
        if duration is not UNSET:
            field_dict["duration"] = duration
        if refund_credits is not UNSET:
            field_dict["refund_credits"] = refund_credits
        if has_vocal is not UNSET:
            field_dict["has_vocal"] = has_vocal
        if error_type is not UNSET:
            field_dict["error_type"] = error_type
        if error_message is not UNSET:
            field_dict["error_message"] = error_message
        if history is not UNSET:
            field_dict["history"] = history

        return field_dict

    @classmethod
    def from_dict(cls: Type[T], src_dict: Dict[str, Any]) -> T:
        from ..models.clip_history_info import ClipHistoryInfo

        d = src_dict.copy()
        gpt_description_prompt = d.pop("gpt_description_prompt", UNSET)

        tags = d.pop("tags", UNSET)

        prompt = d.pop("prompt", UNSET)

        audio_prompt_id = d.pop("audio_prompt_id", UNSET)

        type = d.pop("type", UNSET)

        duration = d.pop("duration", UNSET)

        refund_credits = d.pop("refund_credits", UNSET)

        has_vocal = d.pop("has_vocal", UNSET)

        error_type = d.pop("error_type", UNSET)

        error_message = d.pop("error_message", UNSET)

        history = []
        _history = d.pop("history", UNSET)
        for history_item_data in _history or []:
            history_item = ClipHistoryInfo.from_dict(history_item_data)

            history.append(history_item)

        clip_metadata = cls(
            gpt_description_prompt=gpt_description_prompt,
            tags=tags,
            prompt=prompt,
            audio_prompt_id=audio_prompt_id,
            type=type,
            duration=duration,
            refund_credits=refund_credits,
            has_vocal=has_vocal,
            error_type=error_type,
            error_message=error_message,
            history=history,
        )

        clip_metadata.additional_properties = d
        return clip_metadata

    @property
    def additional_keys(self) -> List[str]:
        return list(self.additional_properties.keys())

    def __getitem__(self, key: str) -> Any:
        return self.additional_properties[key]

    def __setitem__(self, key: str, value: Any) -> None:
        self.additional_properties[key] = value

    def __delitem__(self, key: str) -> None:
        del self.additional_properties[key]

    def __contains__(self, key: str) -> bool:
        return key in self.additional_properties
