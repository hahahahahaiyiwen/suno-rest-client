from typing import Any, Dict, List, Type, TypeVar, Union

from attrs import define as _attrs_define
from attrs import field as _attrs_field

from ..types import UNSET, Unset

T = TypeVar("T", bound="AudioGenerationRequest")


@_attrs_define
class AudioGenerationRequest:
    """
    Attributes:
        prompt (str): The final prompt for executing the generation task, customized by the user in custom mode,
            automatically generated by Suno in simple mode.
        gpt_description_prompt (Union[Unset, str]): The prompt to generate tags, title, lyrics, etc. Will overwrite user
            provided information.
        tags (Union[Unset, str]): Music genre. User-provided in custom mode, automatically generated by Suno in simple
            mode.
        title (Union[Unset, str]): The title of the generated audio. Example: Love Song.
        make_instrumental (Union[Unset, bool]): Whether to generate instrumental music. Example: false.
        mv (Union[Unset, str]): Model version. Example: chirp-v3-5|chirp-v3-0.
        continue_clip_id (Union[Unset, str]): The id of the clip to extend.
        continue_at (Union[Unset, float]): Time in seconds to extend from.
    """

    prompt: str
    gpt_description_prompt: Union[Unset, str] = UNSET
    tags: Union[Unset, str] = UNSET
    title: Union[Unset, str] = UNSET
    make_instrumental: Union[Unset, bool] = UNSET
    mv: Union[Unset, str] = UNSET
    continue_clip_id: Union[Unset, str] = UNSET
    continue_at: Union[Unset, float] = UNSET
    additional_properties: Dict[str, Any] = _attrs_field(init=False, factory=dict)

    def to_dict(self) -> Dict[str, Any]:
        prompt = self.prompt

        gpt_description_prompt = self.gpt_description_prompt

        tags = self.tags

        title = self.title

        make_instrumental = self.make_instrumental

        mv = self.mv

        continue_clip_id = self.continue_clip_id

        continue_at = self.continue_at

        field_dict: Dict[str, Any] = {}
        field_dict.update(self.additional_properties)
        field_dict.update(
            {
                "prompt": prompt,
            }
        )
        if gpt_description_prompt is not UNSET:
            field_dict["gpt_description_prompt"] = gpt_description_prompt
        if tags is not UNSET:
            field_dict["tags"] = tags
        if title is not UNSET:
            field_dict["title"] = title
        if make_instrumental is not UNSET:
            field_dict["make_instrumental"] = make_instrumental
        if mv is not UNSET:
            field_dict["mv"] = mv
        if continue_clip_id is not UNSET:
            field_dict["continue_clip_id"] = continue_clip_id
        if continue_at is not UNSET:
            field_dict["continue_at"] = continue_at

        return field_dict

    @classmethod
    def from_dict(cls: Type[T], src_dict: Dict[str, Any]) -> T:
        d = src_dict.copy()
        prompt = d.pop("prompt")

        gpt_description_prompt = d.pop("gpt_description_prompt", UNSET)

        tags = d.pop("tags", UNSET)

        title = d.pop("title", UNSET)

        make_instrumental = d.pop("make_instrumental", UNSET)

        mv = d.pop("mv", UNSET)

        continue_clip_id = d.pop("continue_clip_id", UNSET)

        continue_at = d.pop("continue_at", UNSET)

        audio_generation_request = cls(
            prompt=prompt,
            gpt_description_prompt=gpt_description_prompt,
            tags=tags,
            title=title,
            make_instrumental=make_instrumental,
            mv=mv,
            continue_clip_id=continue_clip_id,
            continue_at=continue_at,
        )

        audio_generation_request.additional_properties = d
        return audio_generation_request

    @property
    def additional_keys(self) -> List[str]:
        return list(self.additional_properties.keys())

    def __getitem__(self, key: str) -> Any:
        return self.additional_properties[key]

    def __setitem__(self, key: str, value: Any) -> None:
        self.additional_properties[key] = value

    def __delitem__(self, key: str) -> None:
        del self.additional_properties[key]

    def __contains__(self, key: str) -> bool:
        return key in self.additional_properties
